{"version":3,"sources":["components/App/App.styled.js","components/App/components/StarredRepositories/components/StarredRepository.styled.js","components/App/components/StarredRepositories/components/StarredRepository.component.js","components/App/components/StarredRepositories/StarredRepositories.styled.js","components/App/components/StarredRepositories/StarredRepositories.component.js","components/App/App.component.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","Wrapper","styled","div","_templateObject2","StarredRepository_styled_templateObject","Title","span","StarredRepository_styled_templateObject2","Description","_templateObject3","Owner","_templateObject4","OwnerAvatar","img","_templateObject5","CountWrapper","_templateObject6","Footer","_templateObject7","Count","_templateObject8","formateNumber","number","Intl","NumberFormat","format","StarredRepository","_ref","name","description","stargazers","watchers","forkCount","_ref$owner","owner","login","avatarUrl","react_default","a","createElement","StarredRepository_styled_Wrapper","src","totalCount","go","RepositoriesWrapper","StarredRepositories_styled_templateObject","Button","button","StarredRepositories_styled_templateObject2","GET_STARRED_REPOSITORIES","gql","StarredRepositories_component_templateObject","StarredRepositories","react_apollo_browser_umd","query","variables","userLogin","_ref2","data","loading","error","fetchMore","Fragment","web","native","items","user","starredRepositories","edges","keys","d","node","id","from","opacity","transform","to","config","gentle","item","props","style","className","StarredRepository_component","type","onClick","repositories","cursor","length","updateQuery","previousResult","newEdges","fetchMoreResult","Object","objectSpread","__typename","toConsumableArray","concat","fetchReps","client","ApolloClient","uri","headers","Authorization","process","clientState","defaults","resolvers","connectToDevTools","App","StarredRepositories_component","Boolean","window","location","hostname","match","ReactDOM","render","App_component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e89fd31d.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  background-color: #f5f8fa;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: calc(10px + 1vmin);\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  height: 300px;\n  width: 350px;\n  padding: 20px;\n  margin-bottom: 20px;\n  border-radius: 5px;\n  background: #fff;\n  transition: all 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n`;\n\nexport const Title = styled.span`\n  font-size: calc(15px + 1vmin);\n  color: #253f57;\n  text-decoration: none;\n`;\n\nexport const Description = styled.span`\n  margin-top: 20px;\n  line-height: 1.4em;\n  color: lightgrey;\n`;\n\nexport const Owner = styled.span`\n    display: flex;\n    align-items: center;\n    margin-top: 10px;\n    color: black;\n    `;\n\nexport const OwnerAvatar = styled.img`\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n  margin-right: 12px;\n  `;\n\nexport const CountWrapper = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: auto;\n`;\n\nexport const Count = styled.span`\n  margin-right: 10px;\n`;\n","import React from 'react';\nimport { GoEye, GoStar, GoRepoForked } from 'react-icons/go';\nimport { Wrapper, Title, Description, Owner, OwnerAvatar, CountWrapper, Footer, Count } from './StarredRepository.styled';\n\nconst formateNumber = number => new Intl.NumberFormat('ru-RU').format(number);\n\nconst StarredRepository = ({\n  name,\n  description,\n  stargazers,\n  watchers,\n  forkCount,\n  owner: {\n    login,\n    avatarUrl\n  },\n}) => (\n  <Wrapper>\n    <Title>{name}</Title>\n    <Owner>\n      <OwnerAvatar src={avatarUrl} />\n      {login}\n    </Owner>\n    <Description>{description || 'No description'}</Description>\n    <Footer>\n      <CountWrapper>\n        <Count>{formateNumber(watchers.totalCount)}</Count>\n        <GoEye />\n      </CountWrapper>\n      <CountWrapper>\n        <Count>{formateNumber(forkCount)}</Count>\n        <GoRepoForked />\n      </CountWrapper>\n      <CountWrapper>\n        <Count>{formateNumber(stargazers.totalCount)}</Count>\n        <GoStar />\n      </CountWrapper>\n    </Footer>\n  </Wrapper>\n);\n\nexport default StarredRepository;\n","import styled from 'styled-components';\n\nexport const RepositoriesWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-content: space-between;\n  width: 1090px;\n  min-height: 600px;\n`;\n\nexport const Button = styled.button`\n  position: relative;\n  width: 100px;\n  height: 40px;\n  background: #fff;\n  outline: 0;\n  border: 0;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  transition: all 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);\n  cursor: pointer;\n\n  &::after {\n    content: \"\";\n    border-radius: 5px;\n    position: absolute;\n    z-index: -1;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n    opacity: 0;\n    -webkit-transition: all 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);\n    transition: all 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);\n  }\n\n  &:hover {\n    transform: scale(1.02, 1.02);\n  }\n\n  &:hover::after {\n      opacity: 1;\n  }\n`;\n","import React from 'react';\nimport { Query } from 'react-apollo';\nimport { Trail, animated, config } from 'react-spring';\nimport gql from 'graphql-tag';\nimport StarredRepository from './components/StarredRepository.component';\nimport { RepositoriesWrapper, Button } from './StarredRepositories.styled';\n\n\nconst GET_STARRED_REPOSITORIES = gql`\n  query getStarredRepositories($userLogin: String!, $cursor: String) {\n    user(login: $userLogin) {\n      name\n      starredRepositories(first: 6, after: $cursor) {\n        edges {\n          cursor\n          node {\n            id\n            name\n            url\n            description\n            forkCount\n            owner {\n              login\n              avatarUrl\n            }\n            stargazers {\n              totalCount\n            }\n            watchers {\n              totalCount\n            }\n            languages(first: 3) {\n              edges {\n                node {\n                  name\n                }\n                size\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst fetchReps = (fetchMore, data) => {\n  const repositories = data.user.starredRepositories.edges;\n  fetchMore({\n    variables: { cursor: repositories[repositories.length - 1].cursor },\n    updateQuery: (previousResult, { fetchMoreResult }) => {\n      const newEdges = fetchMoreResult.user.starredRepositories.edges;\n      return newEdges.length\n        ? {\n          user: {\n            ...previousResult.user,\n            starredRepositories: {\n              __typename: previousResult.user.starredRepositories.__typename, //eslint-disable-line\n              edges: [...previousResult.user.starredRepositories.edges, ...newEdges],\n            },\n          },\n        }\n        : previousResult;\n    },\n  });\n};\n\nconst StarredRepositories = () => (\n  <Query query={GET_STARRED_REPOSITORIES} variables={{ userLogin: 'andrturko' }}>\n    {({ data, loading, error, fetchMore }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>{error}</p>;\n      return (\n        <>\n          <RepositoriesWrapper>\n            <Trail\n              native\n              items={data.user.starredRepositories.edges}\n              keys={d => d.node.id}\n              from={{ opacity: 0, transform: 'translate3d(0,40px,0)' }}\n              to={{ opacity: 1, transform: 'translate3d(0,0px,0)' }}\n              config={config.gentle}\n            >\n              {item => props => (\n                <animated.div style={props} className=\"item\">\n                  <StarredRepository {...item.node} />\n                </animated.div>\n              )}\n            </Trail>\n          </RepositoriesWrapper>\n          <Button type=\"button\" onClick={() => fetchReps(fetchMore, data)}>Load more</Button>\n        </>\n      );\n    }}\n  </Query>\n);\n\nexport default StarredRepositories;\n","import React from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { Wrapper, GlobalStyle } from './App.styled';\nimport StarredRepositories from './components/StarredRepositories';\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: `bearer ${\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n    }`,\n  },\n  clientState: {\n    defaults: {},\n    resolvers: {},\n  },\n  connectToDevTools: true,\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <Wrapper>\n      <p>Starred repositories:</p>\n      <StarredRepositories />\n    </Wrapper>\n    <GlobalStyle />\n  </ApolloProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')); //eslint-disable-line\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}